"""Each new term in the Fibonacci sequence is generated by
adding the previous two terms. By starting with 1 and 2, the
first 10 terms will be: 1, 2, 3, 5, 8, 13, 21, 34, 55, 89

By considering the terms in the Fibonacci sequence whose values
do not exceed four million, find the sum of the even-valued terms."""


def get_fibonacci(maximum_fib):
    """returns list of fibonacci numbers from 0-max

    max is defining the maximum value within which to find fibonacci
    numbers
    """
    nums = [1, 2]
    for i in range(1000):
        next_fib = nums[-1] + nums[-2]
        if next_fib > maximum_fib:
            return nums
        nums.append(next_fib)

    return nums


def return_even_values(seq):
    """Return a list of even numbers when given a list of numbers

    seq is a list of numbers
    """
    even_nums = []
    for i in seq:
        if i % 2 == 0:
            even_nums.append(i)

    return even_nums


# maximum fibonacci value
goal = 4000000
print(get_fibonacci(goal))

# get only even numbers from fibonacci up to 4m
even_list = return_even_values(get_fibonacci(goal))
print(even_list)
# get sum of those even values in list
print(sum(even_list))
